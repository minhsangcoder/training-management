import React, { useState, useEffect } from 'react'
import { 
  Users, 
  BookOpen, 
  GraduationCap, 
  Calendar,
  TrendingUp,
  Clock,
  CheckCircle,
  AlertCircle,
  UserCheck,
  ClipboardList,
  Award,
  BarChart3
} from 'lucide-react'

const Dashboard = () => {
  // Mock data ph√π h·ª£p v·ªõi ph√≤ng ƒë√†o t·∫°o
  const [stats, setStats] = useState({
    totalPrograms: 45,
    totalStudents: 3250,
    totalSubjects: 285,
    pendingRegistrations: 28,
    graduationRate: 85,
    warningStudents: 45,
    activeClasses: 128,
    roomUtilization: 95
  })

  const statCards = [
    {
      title: 'T·ªïng s·ªë ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o',
      value: stats.totalPrograms,
      icon: GraduationCap,
      color: 'bg-blue-500',
      change: '+3',
      changeType: 'positive'
    },
    {
      title: 'T·ªïng s·ªë sinh vi√™n',
      value: stats.totalStudents.toLocaleString(),
      icon: Users,
      color: 'bg-green-500',
      change: '+125',
      changeType: 'positive'
    },
    {
      title: 'T·ªïng s·ªë h·ªçc ph·∫ßn',
      value: stats.totalSubjects,
      icon: BookOpen,
      color: 'bg-purple-500',
      change: '+8',
      changeType: 'positive'
    },
    {
      title: 'ƒê∆°n ƒëƒÉng k√Ω ch·ªù duy·ªát',
      value: stats.pendingRegistrations,
      icon: Clock,
      color: 'bg-orange-500',
      change: '-5',
      changeType: 'positive'
    }
  ]

  const functionalModules = [
    {
      title: 'Qu·∫£n l√Ω ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o',
      icon: 'üéØ',
      color: 'border-blue-500',
      description: 'T·∫°o, ch·ªânh s·ª≠a v√† qu·∫£n l√Ω ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o',
      bgColor: 'bg-blue-50',
      route: '/programs'
    },
    {
      title: 'Qu·∫£n l√Ω h·ªçc ph·∫ßn',
      icon: 'üìö',
      color: 'border-green-500',
      description: 'Qu·∫£n l√Ω danh m·ª•c h·ªçc ph·∫ßn v√† n·ªôi dung gi·∫£ng d·∫°y',
      bgColor: 'bg-green-50',
      route: '/subjects'
    },
    {
      title: 'Duy·ªát ƒëƒÉng k√Ω h·ªçc',
      icon: '‚úÖ',
      color: 'border-orange-500',
      description: 'X√©t duy·ªát ƒë∆°n ƒëƒÉng k√Ω h·ªçc v√† chuy·ªÉn ng√†nh',
      bgColor: 'bg-orange-50',
      route: '/approvals'
    },
    {
      title: 'B√°o c√°o h·ªçc t·∫≠p',
      icon: 'üìä',
      color: 'border-purple-500',
      description: 'Th·ªëng k√™ v√† b√°o c√°o k·∫øt qu·∫£ h·ªçc t·∫≠p',
      bgColor: 'bg-purple-50',
      route: '/reports'
    },
    {
      title: 'Qu·∫£n l√Ω l·ªãch thi',
      icon: 'üìÖ',
      color: 'border-red-500',
      description: 'L·∫≠p l·ªãch thi v√† qu·∫£n l√Ω k·ª≥ thi',
      bgColor: 'bg-red-50',
      route: '/exams'
    },
    {
      title: 'Qu·∫£n l√Ω gi·∫£ng vi√™n',
      icon: 'üë®‚Äçüè´',
      color: 'border-cyan-500',
      description: 'Ph√¢n c√¥ng gi·∫£ng d·∫°y v√† qu·∫£n l√Ω kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác',
      bgColor: 'bg-cyan-50',
      route: '/teachers'
    },
    {
      title: 'L·∫≠p th·ªùi kh√≥a bi·ªÉu',
      icon: '‚è∞',
      color: 'border-lime-500',
      description: 'S·∫Øp x·∫øp l·ªãch h·ªçc v√† ph√≤ng h·ªçc cho c√°c l·ªõp',
      bgColor: 'bg-lime-50',
      route: '/schedules'
    },
    {
      title: 'Qu·∫£n l√Ω t·ªët nghi·ªáp',
      icon: 'üéì',
      color: 'border-indigo-500',
      description: 'X√©t t·ªët nghi·ªáp v√† c·∫•p b·∫±ng t·ªët nghi·ªáp',
      bgColor: 'bg-indigo-50',
      route: '/graduation'
    }
  ]

  // Tin t·ª©c ph√π h·ª£p v·ªõi ph√≤ng ƒë√†o t·∫°o
  const newsItems = [
    {
      id: 1,
      title: 'Th√¥ng b√°o v·ªÅ l·ªãch ƒëƒÉng k√Ω h·ªçc k·ª≥ m·ªõi nƒÉm h·ªçc 2025-2026',
      date: '2024-01-15',
      type: 'urgent'
    },
    {
      id: 2,
      title: 'H∆∞·ªõng d·∫´n c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o theo chu·∫©n AUN-QA',
      date: '2024-01-12',
      type: 'info'
    },
    {
      id: 3,
      title: 'Quy ƒë·ªãnh m·ªõi v·ªÅ ƒë√°nh gi√° h·ªçc t·∫≠p v√† x√©t t·ªët nghi·ªáp',
      date: '2024-01-10',
      type: 'warning'
    },
    {
      id: 4,
      title: 'Th√¥ng b√°o v·ªÅ h·∫°n ch√≥t n·ªôp b√°o c√°o k·∫øt qu·∫£ ƒë√†o t·∫°o',
      date: '2024-01-08',
      type: 'deadline'
    }
  ]

  // Quick stats m·ªõi
  const quickStats = [
    {
      label: 'T·ª∑ l·ªá t·ªët nghi·ªáp ƒë√∫ng h·∫°n',
      value: `${stats.graduationRate}%`,
      icon: 'üèÜ',
      color: 'text-green-600'
    },
    {
      label: 'SV c·∫£nh b√°o h·ªçc v·ª•',
      value: stats.warningStudents,
      icon: '‚ö†Ô∏è',
      color: 'text-red-600'
    },
    {
      label: 'L·ªõp h·ªçc ƒëang di·ªÖn ra',
      value: stats.activeClasses,
      icon: 'üìñ',
      color: 'text-blue-600'
    },
    {
      label: 'T·ª∑ l·ªá s·ª≠ d·ª•ng ph√≤ng h·ªçc',
      value: `${stats.roomUtilization}%`,
      icon: 'üè´',
      color: 'text-purple-600'
    }
  ]

  // Mock data cho recent activities
  const recentActivities = [
    {
      id: 1,
      title: 'Ph√™ duy·ªát ƒëƒÉng k√Ω chuy·ªÉn ng√†nh',
      student: 'Nguy·ªÖn VƒÉn A - CNTT K20',
      time: '10 ph√∫t tr∆∞·ªõc',
      status: 'approved'
    },
    {
      id: 2,
      title: 'C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o',
      program: 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm',
      time: '30 ph√∫t tr∆∞·ªõc',
      status: 'updated'
    },
    {
      id: 3,
      title: 'ƒêƒÉng k√Ω thi l·∫°i',
      student: 'Tr·∫ßn Th·ªã B - QTKD K21',
      time: '1 gi·ªù tr∆∞·ªõc',
      status: 'pending'
    }
  ]

  const upcomingDeadlines = [
    {
      id: 1,
      task: 'Ho√†n th√†nh l·ªãch thi cu·ªëi k·ª≥',
      deadline: '25/01/2024',
      priority: 'high'
    },
    {
      id: 2,
      task: 'N·ªôp b√°o c√°o ch·∫•t l∆∞·ª£ng ƒë√†o t·∫°o',
      deadline: '30/01/2024',
      priority: 'medium'
    },
    {
      id: 3,
      task: 'C·∫≠p nh·∫≠t danh s√°ch t·ªët nghi·ªáp',
      deadline: '05/02/2024',
      priority: 'high'
    }
  ]

  return (
    <div className="space-y-8 p-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Dashboard Ph√≤ng ƒê√†o T·∫°o</h1>
        <p className="text-gray-600 mt-2">T·ªïng quan h·ªá th·ªëng qu·∫£n l√Ω ƒë√†o t·∫°o</p>
      </div>

      {/* Main Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statCards.map((stat, index) => {
          const Icon = stat.icon
          return (
            <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.title}</p>
                  <p className="text-2xl font-bold text-gray-900 mt-1">{stat.value}</p>
                  <div className="flex items-center mt-2">
                    <span className={`text-sm font-medium ${
                      stat.changeType === 'positive' ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {stat.change}
                    </span>
                    <span className="text-sm text-gray-500 ml-1">so v·ªõi th√°ng tr∆∞·ªõc</span>
                  </div>
                </div>
                <div className={`p-3 rounded-full ${stat.color}`}>
                  <Icon className="w-6 h-6 text-white" />
                </div>
              </div>
            </div>
          )
        })}
      </div>

      {/* Quick Stats Row */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        {quickStats.map((stat, index) => (
          <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{stat.icon}</span>
              <div>
                <p className="text-xs text-gray-500">{stat.label}</p>
                <p className={`text-lg font-bold ${stat.color}`}>{stat.value}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Functional Modules */}
      <div>
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Ch·ª©c nƒÉng h·ªá th·ªëng</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {functionalModules.map((module, index) => (
            <div 
              key={index} 
              className={`${module.bgColor} rounded-lg shadow-sm border-l-4 ${module.color} p-6 hover:shadow-md transition-all duration-200 cursor-pointer group`}
            >
              <div className="text-center">
                <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-200">
                  {module.icon}
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">{module.title}</h3>
                <p className="text-sm text-gray-600 leading-relaxed">{module.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Recent Activity & Upcoming Deadlines */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Recent Activities */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <TrendingUp className="w-5 h-5 mr-2 text-blue-500" />
            Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
          </h3>
          <div className="space-y-4">
            {recentActivities.map((activity) => (
              <div key={activity.id} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                <div className={`w-2 h-2 rounded-full mt-2 ${
                  activity.status === 'approved' ? 'bg-green-500' :
                  activity.status === 'updated' ? 'bg-blue-500' : 'bg-yellow-500'
                }`}></div>
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900">{activity.title}</h4>
                  <p className="text-sm text-gray-600">{activity.student || activity.program}</p>
                  <p className="text-xs text-gray-500 mt-1">{activity.time}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Upcoming Deadlines */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <AlertCircle className="w-5 h-5 mr-2 text-orange-500" />
            Deadline s·∫Øp t·ªõi
          </h3>
          <div className="space-y-4">
            {upcomingDeadlines.map((deadline) => (
              <div key={deadline.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <h4 className="font-medium text-gray-900">{deadline.task}</h4>
                  <p className="text-sm text-gray-600">{deadline.deadline}</p>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  deadline.priority === 'high' 
                    ? 'bg-red-100 text-red-800'
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {deadline.priority === 'high' ? 'Cao' : 'Trung b√¨nh'}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* News Section */}
      <div>
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <div className="w-1 h-8 bg-orange-500 mr-3"></div>
            <h2 className="text-2xl font-bold text-gray-900">Tin t·ª©c ƒë√†o t·∫°o</h2>
          </div>
          <button className="text-blue-600 hover:text-blue-800 font-medium">
            Xem t·∫•t c·∫£
          </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {newsItems.map((news) => (
            <div key={news.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 relative">
              <div className="absolute top-4 right-4">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${
                  news.type === 'urgent' ? 'bg-red-100 text-red-800' :
                  news.type === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                  news.type === 'deadline' ? 'bg-orange-100 text-orange-800' :
                  'bg-blue-100 text-blue-800'
                }`}>
                  {news.type === 'urgent' ? 'üî•' :
                   news.type === 'warning' ? '‚ö†Ô∏è' :
                   news.type === 'deadline' ? '‚è∞' : '‚ÑπÔ∏è'}
                </div>
              </div>
              <div className="pr-12">
                <h3 className="text-sm font-medium text-gray-900 mb-2 line-clamp-3">
                  {news.title}
                </h3>
                <p className="text-xs text-gray-500">{news.date}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Thao t√°c nhanh</h3>
        <div className="flex flex-wrap gap-3">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm">
            ‚ö° Duy·ªát ƒëƒÉng k√Ω h·ªçc nhanh
          </button>
          <button className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm">
            üîî T·∫°o th√¥ng b√°o kh·∫©n c·∫•p
          </button>
          <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm">
            üìä Xu·∫•t b√°o c√°o tu·∫ßn
          </button>
          <button className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm">
            üîç Ki·ªÉm tra xung ƒë·ªôt l·ªãch h·ªçc
          </button>
        </div>
      </div>

      {/* AI Assistant */}
      <div className="fixed bottom-6 right-6">
        <button className="w-14 h-14 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white rounded-full flex items-center justify-center shadow-lg transition-all duration-200 hover:scale-110">
          <span className="text-xl">ü§ñ</span>
        </button>
      </div>
    </div>
  )
}

export default Dashboard
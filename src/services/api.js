// src/services/api.js - UPDATED VERSION
import axios from 'axios'

const api = axios.create({
  baseURL: '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
})

// Request interceptor
api.interceptors.request.use(
  (config) => {
    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`)
    return config
  },
  (error) => {
    console.error('‚ùå Request Error:', error)
    return Promise.reject(error)
  }
)

// Response interceptor
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.config.url}`, response.data)
    return response
  },
  (error) => {
    console.error('‚ùå API Error:', error.response?.data || error.message)
    
    if (!error.response) {
      console.error('üî¥ Network Error - Backend server kh√¥ng ch·∫°y ho·∫∑c kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c')
    }
    
    return Promise.reject(error)
  }
)

// DEPARTMENTS API
export const departmentAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/departments')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng ban')
    }
  },

  create: async (departmentData) => {
    try {
      const response = await api.post('/departments', departmentData)
      return {
        success: true,
        message: 'Th√™m ph√≤ng ban th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      if (error.response?.data?.error?.includes('Validation error')) {
        throw new Error('M√£ ph√≤ng ban ƒë√£ t·ªìn t·∫°i')
      }
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m ph√≤ng ban')
    }
  },

  update: async (id, departmentData) => {
    try {
      const response = await api.put(`/departments/${id}`, departmentData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t ph√≤ng ban th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√≤ng ban')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/departments/${id}`)
      return {
        success: true,
        message: 'X√≥a ph√≤ng ban th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a ph√≤ng ban')
    }
  }
}

// POSITIONS API
export const positionAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/positions')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ª©c v·ª•')
    }
  },

  create: async (positionData) => {
    try {
      const response = await api.post('/positions', positionData)
      return {
        success: true,
        message: 'Th√™m ch·ª©c v·ª• th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m ch·ª©c v·ª•')
    }
  },

  update: async (id, positionData) => {
    try {
      const response = await api.put(`/positions/${id}`, positionData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t ch·ª©c v·ª• th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch·ª©c v·ª•')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/positions/${id}`)
      return {
        success: true,
        message: 'X√≥a ch·ª©c v·ª• th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a ch·ª©c v·ª•')
    }
  }
}

// COURSES API - UPDATED WITH NEW FIELDS
export const courseAPI = {
  // L·∫•y t·∫•t c·∫£ h·ªçc ph·∫ßn
  getAll: async () => {
    try {
      const response = await api.get('/courses')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc ph·∫ßn')
    }
  },

  // L·∫•y h·ªçc ph·∫ßn theo ID
  getById: async (id) => {
    try {
      const response = await api.get(`/courses/${id}`)
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªçc ph·∫ßn')
    }
  },

  // T·∫°o h·ªçc ph·∫ßn m·ªõi
  create: async (courseData) => {
    try {
      // Validate d·ªØ li·ªáu
      if (!courseData.course_code || !courseData.course_name) {
        throw new Error('M√£ h·ªçc ph·∫ßn v√† t√™n h·ªçc ph·∫ßn l√† b·∫Øt bu·ªôc')
      }

      // X·ª≠ l√Ω c√°c tr∆∞·ªùng JSON
      const processedData = {
        ...courseData,
        prerequisite_course_ids: courseData.prerequisite_course_ids || [],
        corequisite_course_ids: courseData.corequisite_course_ids || [],
        prior_course_ids: courseData.prior_course_ids || []
      }

      const response = await api.post('/courses', processedData)
      return {
        success: true,
        message: 'Th√™m h·ªçc ph·∫ßn th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      if (error.response?.data?.error?.includes('Duplicate entry')) {
        throw new Error('M√£ h·ªçc ph·∫ßn ƒë√£ t·ªìn t·∫°i')
      }
      throw new Error(error.response?.data?.error || error.message || 'Kh√¥ng th·ªÉ th√™m h·ªçc ph·∫ßn')
    }
  },

  // C·∫≠p nh·∫≠t h·ªçc ph·∫ßn
  update: async (id, courseData) => {
    try {
      // X·ª≠ l√Ω c√°c tr∆∞·ªùng JSON
      const processedData = {
        ...courseData,
        prerequisite_course_ids: courseData.prerequisite_course_ids || [],
        corequisite_course_ids: courseData.corequisite_course_ids || [],
        prior_course_ids: courseData.prior_course_ids || []
      }

      const response = await api.put(`/courses/${id}`, processedData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t h·ªçc ph·∫ßn th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªçc ph·∫ßn')
    }
  },

  // X√≥a h·ªçc ph·∫ßn
  delete: async (id) => {
    try {
      await api.delete(`/courses/${id}`)
      return {
        success: true,
        message: 'X√≥a h·ªçc ph·∫ßn th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a h·ªçc ph·∫ßn')
    }
  },

  // L·∫•y t√™n c√°c h·ªçc ph·∫ßn theo danh s√°ch ID
  getCourseNamesByIds: async (courseIds) => {
    try {
      if (!courseIds || courseIds.length === 0) {
        return { success: true, data: [] }
      }

      const response = await api.post('/courses/get-names-by-ids', { courseIds })
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      console.error('Error getting course names:', error)
      return { success: true, data: [] }
    }
  },

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
  checkPrerequisites: async (courseId, employeeId) => {
    try {
      const response = await api.post('/courses/check-prerequisites', {
        courseId,
        employeeId
      })
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt')
    }
  }
}

// COURSE CATEGORIES API
export const courseCategoryAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/course-categories')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh m·ª•c h·ªçc ph·∫ßn')
    }
  },

  create: async (categoryData) => {
    try {
      const response = await api.post('/course-categories', categoryData)
      return {
        success: true,
        message: 'Th√™m danh m·ª•c h·ªçc ph·∫ßn th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m danh m·ª•c h·ªçc ph·∫ßn')
    }
  },

  update: async (id, categoryData) => {
    try {
      const response = await api.put(`/course-categories/${id}`, categoryData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t danh m·ª•c h·ªçc ph·∫ßn th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c h·ªçc ph·∫ßn')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/course-categories/${id}`)
      return {
        success: true,
        message: 'X√≥a danh m·ª•c h·ªçc ph·∫ßn th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a danh m·ª•c h·ªçc ph·∫ßn')
    }
  }
}

// HEALTH CHECK
export const healthAPI = {
  check: async () => {
    try {
      const response = await api.get('/health')
      return response.data
    } catch (error) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server')
    }
  }
}

export default api
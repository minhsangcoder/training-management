// src/services/api.js - FIXED VERSION
import axios from 'axios'

// S·ª≠ d·ª•ng proxy thay v√¨ direct URL
const api = axios.create({
  baseURL: '/api', // D√πng proxy t·ª´ vite.config.js
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
})

// Request interceptor
api.interceptors.request.use(
  (config) => {
    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`)
    return config
  },
  (error) => {
    console.error('‚ùå Request Error:', error)
    return Promise.reject(error)
  }
)

// Response interceptor
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.config.url}`, response.data)
    return response
  },
  (error) => {
    console.error('‚ùå API Error:', error.response?.data || error.message)
    
    // Handle network errors
    if (!error.response) {
      console.error('üî¥ Network Error - Backend server kh√¥ng ch·∫°y ho·∫∑c kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c')
    }
    
    return Promise.reject(error)
  }
)

// DEPARTMENTS API - Fixed to match backend response
export const departmentAPI = {
  // L·∫•y danh s√°ch ph√≤ng ban
  getAll: async () => {
    try {
      const response = await api.get('/departments')
      // Backend tr·∫£ v·ªÅ array tr·ª±c ti·∫øp, kh√¥ng c√≥ wrapper
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      console.error('Error in departmentAPI.getAll:', error)
      throw new Error(
        error.response?.data?.error || 
        error.message || 
        'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng ban'
      )
    }
  },

  // Th√™m ph√≤ng ban m·ªõi
  create: async (departmentData) => {
    try {
      const response = await api.post('/departments', departmentData)
      return {
        success: true,
        message: 'Th√™m ph√≤ng ban th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      console.error('Error in departmentAPI.create:', error)
      
      // X·ª≠ l√Ω l·ªói Sequelize unique constraint
      if (error.response?.data?.error?.includes('Validation error')) {
        throw new Error('M√£ ph√≤ng ban ƒë√£ t·ªìn t·∫°i')
      }
      
      throw new Error(
        error.response?.data?.error || 
        'Kh√¥ng th·ªÉ th√™m ph√≤ng ban'
      )
    }
  },

  // C·∫≠p nh·∫≠t ph√≤ng ban
  update: async (id, departmentData) => {
    try {
      const response = await api.put(`/departments/${id}`, departmentData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t ph√≤ng ban th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      console.error('Error in departmentAPI.update:', error)
      throw new Error(
        error.response?.data?.error || 
        'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√≤ng ban'
      )
    }
  },

  // X√≥a ph√≤ng ban
  delete: async (id) => {
    try {
      const response = await api.delete(`/departments/${id}`)
      return {
        success: true,
        message: 'X√≥a ph√≤ng ban th√†nh c√¥ng'
      }
    } catch (error) {
      console.error('Error in departmentAPI.delete:', error)
      throw new Error(
        error.response?.data?.error || 
        'Kh√¥ng th·ªÉ x√≥a ph√≤ng ban'
      )
    }
  },

  // L·∫•y ph√≤ng ban theo ID
  getById: async (id) => {
    try {
      const response = await api.get(`/departments/${id}`)
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      console.error('Error in departmentAPI.getById:', error)
      throw new Error(
        error.response?.data?.error || 
        'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ph√≤ng ban'
      )
    }
  }
}

// POSITIONS API - Fixed
export const positionAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/positions')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch·ª©c v·ª•')
    }
  },

  create: async (positionData) => {
    try {
      const response = await api.post('/positions', positionData)
      return {
        success: true,
        message: 'Th√™m ch·ª©c v·ª• th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m ch·ª©c v·ª•')
    }
  },

  update: async (id, positionData) => {
    try {
      const response = await api.put(`/positions/${id}`, positionData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t ch·ª©c v·ª• th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch·ª©c v·ª•')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/positions/${id}`)
      return {
        success: true,
        message: 'X√≥a ch·ª©c v·ª• th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a ch·ª©c v·ª•')
    }
  }
}

// EMPLOYEES API - Fixed
export const employeeAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/employees')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n')
    }
  },

  create: async (employeeData) => {
    try {
      const response = await api.post('/employees', employeeData)
      return {
        success: true,
        message: 'Th√™m nh√¢n vi√™n th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n')
    }
  },

  update: async (id, employeeData) => {
    try {
      const response = await api.put(`/employees/${id}`, employeeData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/employees/${id}`)
      return {
        success: true,
        message: 'X√≥a nh√¢n vi√™n th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n')
    }
  }
}

// COURSES API - Fixed
export const courseAPI = {
  getAll: async () => {
    try {
      const response = await api.get('/courses')
      return {
        success: true,
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc')
    }
  },

  create: async (courseData) => {
    try {
      const response = await api.post('/courses', courseData)
      return {
        success: true,
        message: 'Th√™m kh√≥a h·ªçc th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ th√™m kh√≥a h·ªçc')
    }
  },

  update: async (id, courseData) => {
    try {
      const response = await api.put(`/courses/${id}`, courseData)
      return {
        success: true,
        message: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng',
        data: response.data
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc')
    }
  },

  delete: async (id) => {
    try {
      await api.delete(`/courses/${id}`)
      return {
        success: true,
        message: 'X√≥a kh√≥a h·ªçc th√†nh c√¥ng'
      }
    } catch (error) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc')
    }
  }
}

// HEALTH CHECK
export const healthAPI = {
  check: async () => {
    try {
      const response = await api.get('/health')
      return response.data
    } catch (error) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server')
    }
  }
}

export default api